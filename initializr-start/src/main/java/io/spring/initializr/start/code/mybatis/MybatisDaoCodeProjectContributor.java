package io.spring.initializr.start.code.mybatis;

import com.baomidou.mybatisplus.core.toolkit.StringUtils;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.InjectionConfig;
import com.baomidou.mybatisplus.generator.config.*;
import com.baomidou.mybatisplus.generator.config.builder.ConfigBuilder;
import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;
import io.spring.initializr.generator.project.ResolvedProjectDescription;
import io.spring.initializr.generator.project.contributor.ProjectContributor;

import java.io.IOException;
import java.nio.file.Path;
import java.util.Map;

/**
 * Date : 2019-02-26
 * Author : pengkai.fu
 */
public class MybatisDaoCodeProjectContributor implements ProjectContributor {


    public static final String DEFAULT_JDBC_URL = "jdbc:mysql://127.0.0.1:3306/xxxx?useUnicode=true&useSSL=false&characterEncoding=utf8";

    private ResolvedProjectDescription projectDescription;

    public MybatisDaoCodeProjectContributor(ResolvedProjectDescription projectDescription) {
        this.projectDescription = projectDescription;
    }

    @Override
    public void contribute(Path projectRoot) throws IOException {
        if (StringUtils.isEmpty(projectDescription.getJdbcUrl()) || DEFAULT_JDBC_URL.equals(projectDescription.getJdbcUrl())) {
            return;
        }
        autoGenerateDaoClass(projectRoot);
    }

    private void autoGenerateDaoClass(Path projectRoot) {

        // 代码生成器
        AutoGenerator mpg = new AutoGenerator();

        // 全局配置
        GlobalConfig gc = new GlobalConfig();
        String projectPath = System.getProperty("user.dir");
        System.out.println(projectPath);
        gc.setOutputDir(projectRoot.toString());
        gc.setAuthor("dmall");
        gc.setOpen(false);
        mpg.setGlobalConfig(gc);

        // 数据源配置
        DataSourceConfig dsc = new DataSourceConfig();
        dsc.setUrl(projectDescription.getJdbcUrl());
        // dsc.setSchemaName("public");
        dsc.setDriverName("com.mysql.jdbc.Driver");
        dsc.setUsername(projectDescription.getUserName());
        dsc.setPassword(projectDescription.getPassword());
        mpg.setDataSource(dsc);

        // 包配置
        PackageConfig pc = new PackageConfig();
        pc.setParent(projectDescription.getPackageName());
        mpg.setPackageInfo(pc);

        // 自定义配置
        InjectionConfig cfg = new InjectionConfig() {
            @Override
            public void initMap() {
                // to do nothing
            }
        };


        mpg.setCfg(cfg);
        // 配置模板
        TemplateConfig templateConfig = new TemplateConfig();

        // 配置自定义输出模板
        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别
        // templateConfig.setEntity("templates/entity2.java");
        // templateConfig.setService();
        // templateConfig.setController();

        templateConfig.setXml(null);
        templateConfig.setController(null);
        mpg.setTemplate(templateConfig);

        // 策略配置
        StrategyConfig strategy = new StrategyConfig();
        strategy.setNaming(NamingStrategy.underline_to_camel);
        strategy.setColumnNaming(NamingStrategy.underline_to_camel);
        strategy.setEntityLombokModel(true);
        // 表名
        strategy.setInclude();
        strategy.setSuperEntityColumns("id");
        strategy.setControllerMappingHyphenStyle(true);
        strategy.setTablePrefix(pc.getModuleName() + "_");
        mpg.setStrategy(strategy);
        mpg.setTemplateEngine(new FreemarkerTemplateEngine());


        ConfigBuilder configBuilder = new ConfigBuilder(mpg.getPackageInfo(), mpg.getDataSource(), mpg.getStrategy(), mpg
                .getTemplate(), mpg.getGlobalConfig());

        if (null != mpg.getCfg()) {
            mpg.setConfig(configBuilder);
        }
        // 生成路径信息
        Map<String, String> pathInfo = mpg.getConfig().getPathInfo();


        String pojo = projectDescription.getPackageName("pojo").replaceAll("\\.", "/");
        String service = projectDescription.getPackageName("service").replaceAll("\\.", "/");
        String dao = projectDescription.getPackageName("dao").replaceAll("\\.", "/");

        setPathInfo(pathInfo, templateConfig.getEntity(mpg.getGlobalConfig()
                .isKotlin()), getModulePath(gc.getOutputDir() + "/", projectDescription.getModuleName("pojo"), "/src/main/java/") + pojo, ConstVal.ENTITY_PATH);
        setPathInfo(pathInfo, templateConfig.getMapper(), getModulePath(gc.getOutputDir() + "/", projectDescription.getModuleName("dao"), "/src/main/java/") + dao, ConstVal.MAPPER_PATH);
        setPathInfo(pathInfo, templateConfig.getService(), getModulePath(gc.getOutputDir() + "/", projectDescription.getModuleName("service"), "/src/main/java/") + service, ConstVal.SERVICE_PATH);
        setPathInfo(pathInfo, templateConfig.getServiceImpl(), getModulePath(gc.getOutputDir() + "/", projectDescription
                .getModuleName("service"), "/src/main/java/") + service + "/impl", ConstVal.SERVICE_IMPL_PATH);

        mpg.execute();
    }


    private String getModulePath(String rootPath, String module, String src) {
        return rootPath + module + src;
    }

    private void setPathInfo(Map<String, String> pathInfo, String template, String outputDir, String path) {
        if (StringUtils.isNotEmpty(template)) {
            pathInfo.put(path, outputDir);
        }
    }


}
